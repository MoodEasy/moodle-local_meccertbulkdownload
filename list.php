<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Displays the list of certificates and allows their download and delete.
 *
 * @package    local_meccertbulkdownload
 * @author     MoodEasy
 * @copyright  (c) 2024 onwards MoodEasy (moodeasy.com)
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

require('../../config.php');

$context = context_system::instance();

$PAGE->set_context($context);
$PAGE->set_url('/local/meccertbulkdownload/list.php');
$PAGE->set_title(get_string('pluginname', 'local_meccertbulkdownload'));
$PAGE->set_heading(get_string('pluginname', 'local_meccertbulkdownload'));

require_login();

require_capability('local/meccertbulkdownload:viewarchives', $context);
$deletearchives = has_capability('local/meccertbulkdownload:deletearchives', $context);

$page = optional_param('page', 0, PARAM_INT);
$perpage = optional_param('perpage', 25, PARAM_INT);

$fs = get_file_storage();

$output = $PAGE->get_renderer('local_meccertbulkdownload');



// Manages the possible deletion of a compressed file....



$action = optional_param('action', '', PARAM_ALPHA);
if ($action) {
    $actionid = required_param('aid', PARAM_INT);
}
$confirm = optional_param('confirm', 0, PARAM_INT);

// Checks if it comes from the same page after clicking Delete related to a file.
if ($action && $action === 'del') {

    require_capability('local/meccertbulkdownload:deletearchives', $context);

    // Check if user has already seen the confirmation request.
    if ($confirm) {  // Confirmation seen.
        if ($actionid) {

            // After the operation it redirects to avoid problems if the user reloads the page.
            $backurl = new moodle_url('/local/meccertbulkdownload/list.php');

            $file = $fs->get_file_by_id($actionid);

            // If the file is one of those generated by the plugin.
            if (
                $file->get_component() === 'local_meccertbulkdownload'
                && $file->get_filearea() === 'meccertbulkdownload_issues'
            ) {
                if ($file->delete()) {
                    redirect(
                        $backurl,
                        get_string('deletesuccess',
                        'local_meccertbulkdownload'),
                        null,
                        \core\output\notification::NOTIFY_SUCCESS
                    );
                } else {
                    redirect(
                        $backurl,
                        get_string('deleteerror', 'local_meccertbulkdownload'),
                        null,
                        \core\output\notification::NOTIFY_ERROR
                    );
                }
            } else {
                redirect(
                    $backurl,
                    get_string('deleteerror', 'local_meccertbulkdownload'),
                    null,
                    \core\output\notification::NOTIFY_ERROR
                );
            }

        } else {
            // Between the parameters the id of the file to be deleted is not present:
            // it does nothing and proceeds by displaying the page.
            \core\notification::error(get_string('deletenoparam', 'local_meccertbulkdownload'));
        }
    } else {  // Has yet to see the confirmation request.
        $file = $fs->get_file_by_id($actionid);
        $output->archives_deletion_confirmation_page($file, $actionid);
    }
}



// ... end of management of the possible deletion of a compressed file.



// Obtains the list of files saved in the meccertbulkdownload_issues area of ​​Moodle.
$files = $fs->get_area_files($context->id, 'local_meccertbulkdownload', 'meccertbulkdownload_issues', 0);

// Recreate the array with the id in the key so you can sort it chronologically
// (does not use the creation date as key because if multiple files had the same
// creation date, only the last one would be kept).
$files2 = [];
foreach ($files as $file) {
    $files2[$file->get_id()] = $file;
}
if ($files2) {
    krsort($files2, SORT_NUMERIC);
}
$files = $files2;
unset($files2);


// Pagination parameters.
$recscount = count($files);
$from = ($perpage * $page) + 1;
$to = ($perpage * $page) + $perpage;
if ($to > $recscount) {
    $to = $recscount;
}

// Filter the list based on pagination.
$files = array_slice($files, $from - 1, $perpage, true);

// Prepare parameters for pagination bar.
$params = ['page' => $page, 'perpage' => $perpage];
$baseurl = new moodle_url('/local/meccertbulkdownload/list.php', $params);

// Prepare parameters for selecting how many per page.
$params = ['page' => 0];
$baseurl2 = new moodle_url('/local/meccertbulkdownload/list.php', $params);

$recordsstatus = str_replace(
    ['{{from}}', '{{to}}', '{{count}}'],
    [$from, $to, $recscount],
    get_string('tablerecordscount', 'local_meccertbulkdownload')
);

$paginationurl = html_entity_decode($baseurl2->out() . '&perpage=');

$perpageoptions = [
    (object) ['value' => 2, 'selected' => ($perpage == 2 ? true : false)],
    (object) ['value' => 10, 'selected' => ($perpage == 10 ? true : false)],
    (object) ['value' => 25, 'selected' => ($perpage == 25 ? true : false)],
    (object) ['value' => 50, 'selected' => ($perpage == 50 ? true : false)],
    (object) ['value' => 100, 'selected' => ($perpage == 100 ? true : false)],
];


echo $output->archives_page(
    $page,
    $perpage,
    $from,
    $to,
    $recscount,
    $recordsstatus,
    $baseurl,
    $paginationurl,
    $files,
    $deletearchives,
    $perpageoptions
);
